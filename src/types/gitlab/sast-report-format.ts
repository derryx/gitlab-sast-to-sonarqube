/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type TextValue = string;
export type DetailType =
  | NamedList
  | List
  | Table
  | Text
  | Url
  | Code
  | Value
  | Diff
  | Markdown
  | Commit
  | FileLocation
  | ModuleLocation;

/**
 * This schema provides the report format for Static Application Security Testing analyzers (https://docs.gitlab.com/ee/user/application_security/sast).
 */
export interface ReportFormatForGitLabSAST {
  scan?: {
    /**
     * ISO8601 UTC value with format yyyy-mm-ddThh:mm:ss, representing when the scan finished.
     */
    end_time: string;
    messages?: {
      /**
       * Describes the severity of the communication. Use info to communicate normal scan behaviour; warn to communicate a potentially recoverable problem, or a partial error; fatal to communicate an issue that causes the scan to halt.
       */
      level: "info" | "warn" | "fatal";
      /**
       * The message to communicate.
       */
      value: string;
      [k: string]: unknown;
    }[];
    /**
     * Object defining the analyzer used to perform the scan. Analyzers typically delegate to an underlying scanner to run the scan.
     */
    analyzer?: {
      /**
       * Unique id that identifies the analyzer.
       */
      id: string;
      /**
       * A human readable value that identifies the analyzer, not required to be unique.
       */
      name: string;
      /**
       * A link to more information about the analyzer.
       */
      url?: string;
      /**
       * The vendor/maintainer of the analyzer.
       */
      vendor: {
        /**
         * The name of the vendor.
         */
        name: string;
        [k: string]: unknown;
      };
      /**
       * The version of the analyzer.
       */
      version: string;
      [k: string]: unknown;
    };
    /**
     * Object defining the scanner used to perform the scan.
     */
    scanner: {
      /**
       * Unique id that identifies the scanner.
       */
      id: string;
      /**
       * A human readable value that identifies the scanner, not required to be unique.
       */
      name: string;
      /**
       * A link to more information about the scanner.
       */
      url?: string;
      /**
       * The version of the scanner.
       */
      version: string;
      /**
       * The vendor/maintainer of the scanner.
       */
      vendor: {
        /**
         * The name of the vendor.
         */
        name: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    /**
     * ISO8601 UTC value with format yyyy-mm-ddThh:mm:ss, representing when the scan started.
     */
    start_time: string;
    /**
     * Result of the scan.
     */
    status: "success" | "failure";
    /**
     * Type of the scan.
     */
    type: "sast";
    [k: string]: unknown;
  };
  /**
   * URI pointing to the validating security report schema.
   */
  schema?: string;
  /**
   * The version of the schema to which the JSON report conforms.
   */
  version: string;
  /**
   * Array of vulnerability objects.
   */
  vulnerabilities: {
    /**
     * Unique identifier of the vulnerability. This is recommended to be a UUID.
     */
    id?: string;
    /**
     * Describes where this vulnerability belongs (for example, SAST, Dependency Scanning, and so on).
     */
    category: string;
    /**
     * The name of the vulnerability. This must not include the finding's specific information.
     */
    name?: string;
    /**
     * A short text section that describes the vulnerability. This may include the finding's specific information.
     */
    message?: string;
    /**
     * A long text section describing the vulnerability more fully.
     */
    description?: string;
    /**
     * (Deprecated - use vulnerabilities[].id instead) A fingerprint string value that represents a concrete finding. This is used to determine whether two findings are same, which may not be 100% accurate. Note that this is NOT a CVE as described by https://cve.mitre.org/.
     */
    cve: string;
    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     */
    severity?: "Info" | "Unknown" | "Low" | "Medium" | "High" | "Critical";
    /**
     * How reliable the vulnerability's assessment is. Possible values are Ignore, Unknown, Experimental, Low, Medium, High, and Confirmed. Note that some analyzers may not report all these possible values.
     */
    confidence?: "Ignore" | "Unknown" | "Experimental" | "Low" | "Medium" | "High" | "Confirmed";
    /**
     * Explanation of how to fix the vulnerability.
     */
    solution?: string;
    /**
     * Describes the scanner used to find this vulnerability.
     */
    scanner: {
      /**
       * The scanner's ID, as a snake_case string.
       */
      id: string;
      /**
       * Human-readable name of the scanner.
       */
      name: string;
      [k: string]: unknown;
    };
    /**
     * An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.
     */
    identifiers: [
      {
        /**
         * for example, cve, cwe, osvdb, usn, or an analyzer-dependent type such as gemnasium).
         */
        type: string;
        /**
         * Human-readable name of the identifier.
         */
        name: string;
        /**
         * URL of the identifier's documentation.
         */
        url?: string;
        /**
         * Value of the identifier, for matching purpose.
         */
        value: string;
        [k: string]: unknown;
      },
      ...{
        /**
         * for example, cve, cwe, osvdb, usn, or an analyzer-dependent type such as gemnasium).
         */
        type: string;
        /**
         * Human-readable name of the identifier.
         */
        name: string;
        /**
         * URL of the identifier's documentation.
         */
        url?: string;
        /**
         * Value of the identifier, for matching purpose.
         */
        value: string;
        [k: string]: unknown;
      }[]
    ];
    /**
     * An array of references to external documentation or articles that describe the vulnerability.
     */
    links?: {
      /**
       * Name of the vulnerability details link.
       */
      name?: string;
      /**
       * URL of the vulnerability details document.
       */
      url: string;
      [k: string]: unknown;
    }[];
    details?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^.*$".
       */
      [k: string]: NamedField & DetailType;
    };
    /**
     * Describes how this vulnerability should be tracked as the project changes.
     */
    tracking?: {
      type?: "source";
      items: {
        /**
         * Path to the file where the vulnerability is located.
         */
        file?: string;
        /**
         * The first line of the file that includes the vulnerability.
         */
        start_line?: number;
        /**
         * The last line of the file that includes the vulnerability.
         */
        end_line?: number;
        /**
         * An array of calculated tracking signatures for this tracking item.
         */
        signatures: [
          {
            /**
             * The algorithm used to generate the signature.
             */
            algorithm: string;
            /**
             * The result of this signature algorithm.
             */
            value: string;
            [k: string]: unknown;
          },
          ...{
            /**
             * The algorithm used to generate the signature.
             */
            algorithm: string;
            /**
             * The result of this signature algorithm.
             */
            value: string;
            [k: string]: unknown;
          }[]
        ];
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    };
    /**
     * Flags that can be attached to vulnerabilities.
     */
    flags?: {
      /**
       * Result of the scan.
       */
      type: "flagged-as-likely-false-positive";
      /**
       * Tool that issued the flag.
       */
      origin: string;
      /**
       * What the flag is about.
       */
      description: string;
      [k: string]: unknown;
    }[];
    /**
     * Identifies the vulnerability's location.
     */
    location: {
      /**
       * Path to the file where the vulnerability is located.
       */
      file?: string;
      /**
       * The first line of the code affected by the vulnerability.
       */
      start_line?: number;
      /**
       * The last line of the code affected by the vulnerability.
       */
      end_line?: number;
      /**
       * Provides the name of the class where the vulnerability is located.
       */
      class?: string;
      /**
       * Provides the name of the method where the vulnerability is located.
       */
      method?: string;
      [k: string]: unknown;
    };
    /**
     * Provides an unsanitized excerpt of the affected source code.
     */
    raw_source_code_extract?: string;
    [k: string]: unknown;
  }[];
  /**
   * An array of objects containing information on available remediations, along with patch diffs to apply.
   */
  remediations?: {
    /**
     * An array of strings that represent references to vulnerabilities fixed by this remediation.
     */
    fixes: {
      /**
       * (Deprecated - use vulnerabilities[].id instead) A fingerprint string value that represents a concrete finding. This is used to determine whether two findings are same, which may not be 100% accurate. Note that this is NOT a CVE as described by https://cve.mitre.org/.
       */
      cve: string;
      [k: string]: unknown;
    }[];
    /**
     * An overview of how the vulnerabilities were fixed.
     */
    summary: string;
    /**
     * A base64-encoded remediation code diff, compatible with git apply.
     */
    diff: string;
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
}
export interface NamedField {
  name: string;
  description?: TextValue;
  [k: string]: unknown;
}
/**
 * An object with named and typed fields
 */
export interface NamedList {
  type: "named-list";
  items: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^.*$".
     */
    [k: string]: NamedField & DetailType;
  };
  [k: string]: unknown;
}
/**
 * A list of typed fields
 */
export interface List {
  type: "list";
  items: DetailType[];
  [k: string]: unknown;
}
/**
 * A table of typed fields
 */
export interface Table {
  type: "table";
  header?: DetailType[];
  rows: DetailType[][];
  [k: string]: unknown;
}
/**
 * Raw text
 */
export interface Text {
  type: "text";
  value: TextValue;
  [k: string]: unknown;
}
/**
 * A single URL
 */
export interface Url {
  type: "url";
  text?: TextValue;
  href: string;
  [k: string]: unknown;
}
/**
 * A codeblock
 */
export interface Code {
  type: "code";
  value: string;
  /**
   * A programming language
   */
  lang?: string;
  [k: string]: unknown;
}
/**
 * A field that can store a range of types of value
 */
export interface Value {
  type: "value";
  value: number | string | boolean;
  [k: string]: unknown;
}
/**
 * A diff
 */
export interface Diff {
  type: "diff";
  before: string;
  after: string;
  [k: string]: unknown;
}
/**
 * GitLab flavoured markdown, see https://docs.gitlab.com/ee/user/markdown.html
 */
export interface Markdown {
  type: "markdown";
  value: string;
  [k: string]: unknown;
}
/**
 * A commit/tag/branch within the GitLab project
 */
export interface Commit {
  type: "commit";
  /**
   * The commit SHA
   */
  value: string;
  [k: string]: unknown;
}
/**
 * A location within a file in the project
 */
export interface FileLocation {
  type: "file-location";
  file_name: string;
  line_start: number;
  line_end?: number;
  [k: string]: unknown;
}
/**
 * A location within a binary module of the form module+relative_offset
 */
export interface ModuleLocation {
  type: "module-location";
  module_name: string;
  offset: number;
  [k: string]: unknown;
}
